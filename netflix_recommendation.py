# -*- coding: utf-8 -*-
"""Netflix .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10sdvh_YWsFp-5u5e_RPC5jop_sm9CXxL
"""

import pandas as pd

# 1. Import libraries
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from difflib import get_close_matches

# 2. Load the dataset
df = pd.read_csv('netflix_titles.csv')

# 3. Fill missing values
df['title'] = df['title'].fillna('')
df['listed_in'] = df['listed_in'].fillna('')
df['description'] = df['description'].fillna('')

# 4. Create a 'content' field with more weight on genre
df['content'] = df['listed_in'] * 3 + ' ' + df['description']

# 5. TF-IDF Vectorizer to convert text to feature vectors
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['content'])

# 6. Compute cosine similarity matrix
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# 7. Reset index and build mapping from lowercase titles to index
df = df.reset_index()
indices = pd.Series(df.index, index=df['title'].str.lower()).drop_duplicates()

# 8. Recommendation function with fuzzy title support
def get_recommendations(title, cosine_sim=cosine_sim):
    title = title.lower().strip()

    if title not in indices:
        # Suggest close matches
        close_matches = get_close_matches(title, indices.index, n=3, cutoff=0.6)
        if close_matches:
            return f"Title not found. Did you mean: {close_matches}?"
        else:
            return f"Title '{title}' not found in dataset."

    # Get index of the movie
    idx = indices[title]

    # Get similarity scores
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort based on similarity score
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get top 10 (excluding itself)
    sim_scores = sim_scores[1:11]

    # Extract movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return recommended titles
    return df['title'].iloc[movie_indices].tolist()

# 9. Test the recommender
print("Recommendations for 'Breaking Bad':")
print(get_recommendations("Breaking Bad"))

print("\nRecommendations for 'The Matrix':")
print(get_recommendations("The Matrix"))

# Optional: Try misspelled title
print("\nRecommendations for 'braking bad':")
print(get_recommendations("braking bad"))

print(get_recommendations("Narcos"))